apply plugin: "org.shipkit.shipkit-auto-version"
apply plugin: "org.shipkit.shipkit-changelog"
apply plugin: "org.shipkit.shipkit-gh-release"

tasks.named("generateChangelog") {
    previousRevision = "v" + project.ext.'shipkit-auto-version.previous-version'
    readOnlyToken = "a0a4c0f41c200f7c653323014d6a72a127764e17"
    repository = "mockito/mockito"
}

tasks.named("githubRelease") {
    def genTask = tasks.named("generateChangelog").get()
    dependsOn genTask
    repository = genTask.repository
    changelog = genTask.outputFile
    writeToken = System.getenv("GH_WRITE_TOKEN")
}

/**
 * Mockito team does not publish to Maven Central every release as requested by the community.
 * We publish to maven central only some versions. All versions are published to Bintray on every change.
 * See https://github.com/mockito/mockito/issues/911
 */
boolean centralRelease = shouldReleaseToCentral(project)


//allprojects {
//    plugins.withId("org.shipkit.bintray") {
//        bintray {
//            pkg {
//                repo = 'maven' //https://bintray.com/mockito/maven
//
//                //We need to use some user id here, because the Bintray key is associated with the user
//                //However, any user id is good, so longer the user has necessary privileges to the repository
//                user = 'szczepiq' //https://bintray.com/szczepiq
//
//                userOrg = 'mockito' //https://bintray.com/mockito
//                name = 'mockito' //https://bintray.com/mockito/maven/mockito
//                licenses = ['MIT']
//                labels = ['mocks', 'tdd', 'unit tests']
//                publish = true //can be changed to 'false' for testing
//
//                //See our Bintray packages at https://bintray.com/mockito/maven
//                name = centralRelease? "mockito" : "mockito-development"
//
//                version {
//                    //Notable versions are automatically synced to Maven Central repository (https://oss.sonatype.org/)
//                    mavenCentralSync {
//                        sync = centralRelease
//                        user = System.env.NEXUS_TOKEN_USER
//                        password = System.env.NEXUS_TOKEN_PWD
//                    }
//                }
//            }
//        }
//    }
//}

/**
 * Finds out if we should release to Maven Central.
 * To test this logic, run build with '-i' (info logging) and inspect the build output.
 */
static boolean shouldReleaseToCentral(project) {
    boolean centralReleaseByCommit = System.getenv("TRAVIS_COMMIT_MESSAGE")?.contains("[ci maven-central-release]")
    boolean centralReleaseByProjectProperty = project.hasProperty("maven-central-release")
    boolean centralRelease = centralReleaseByCommit || centralReleaseByProjectProperty
    def message = """Release was using following settings:
 - commit message contains '[ci maven-central-release]': $centralReleaseByCommit
 - project property 'maven-central-release' exists: $centralReleaseByProjectProperty
 - Maven Central release is enabled: $centralRelease"""
    project.logger.info(message)
//TODO?
//    project.afterEvaluate {
//        project.tasks.performRelease.doLast { logger.lifecycle(message) }
//    }
    return centralRelease
}
